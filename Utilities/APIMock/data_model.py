# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-03-15T22:11:02+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, constr


class Settings(BaseModel):
    noise: int = Field(..., description='Noise Gate Threshold (0 - 100)', example=10)
    compression: int = Field(
        ..., description='Compression Threshold (0 - 100)', example=80
    )
    loFreqHue: int = Field(
        ..., description='RGB for Low Frequency Hue (0 - 0xFFFFFF)', example=0
    )
    hiFreqHue: int = Field(
        ..., description='RGB for High Frequency Hue (0 - 0xFFFFFF)', example=80294
    )
    ledCount: int = Field(
        ..., description='Number of LEDs connected to the output.', example=50
    )


class Pattern(Enum):
    confetti = 'confetti'
    solid = 'solid'
    trail = 'trail'
    vbar = 'vbar'


class Control(BaseModel):
    pattern: Pattern = Field(..., description='name of visualization pattern')


class WiFi(BaseModel):
    ssid: str = Field(..., description='name of the WiFi network')
    rssi: Optional[int] = Field(None, description='signal strength of the WiFi network')
    lock: Optional[bool] = Field(
        None, description='is the WiFi network password protected?'
    )


class WiFiCreds(BaseModel):
    ssid: str = Field(..., description='name of the WiFi network')
    key: Optional[str] = Field(None, description='hashed key for WiFi')


class Hostname(BaseModel):
    hostname: constr(
        regex=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z'
    )


class ApiResponse(BaseModel):
    message: Optional[str] = None
    details: Optional[str] = None
    success: Optional[bool] = None
